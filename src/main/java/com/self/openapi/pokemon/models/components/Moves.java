/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package com.self.openapi.pokemon.models.components;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.self.openapi.pokemon.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.util.List;
import java.util.Objects;


public class Moves {

    @JsonProperty("move")
    private Move move;

    @JsonProperty("version_group_details")
    private List<VersionGroupDetails> versionGroupDetails;

    @JsonCreator
    public Moves(
            @JsonProperty("move") Move move,
            @JsonProperty("version_group_details") List<VersionGroupDetails> versionGroupDetails) {
        Utils.checkNotNull(move, "move");
        Utils.checkNotNull(versionGroupDetails, "versionGroupDetails");
        this.move = move;
        this.versionGroupDetails = versionGroupDetails;
    }

    @JsonIgnore
    public Move move() {
        return move;
    }

    @JsonIgnore
    public List<VersionGroupDetails> versionGroupDetails() {
        return versionGroupDetails;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public Moves withMove(Move move) {
        Utils.checkNotNull(move, "move");
        this.move = move;
        return this;
    }

    public Moves withVersionGroupDetails(List<VersionGroupDetails> versionGroupDetails) {
        Utils.checkNotNull(versionGroupDetails, "versionGroupDetails");
        this.versionGroupDetails = versionGroupDetails;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        Moves other = (Moves) o;
        return 
            Objects.deepEquals(this.move, other.move) &&
            Objects.deepEquals(this.versionGroupDetails, other.versionGroupDetails);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            move,
            versionGroupDetails);
    }
    
    @Override
    public String toString() {
        return Utils.toString(Moves.class,
                "move", move,
                "versionGroupDetails", versionGroupDetails);
    }
    
    public final static class Builder {
 
        private Move move;
 
        private List<VersionGroupDetails> versionGroupDetails;  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder move(Move move) {
            Utils.checkNotNull(move, "move");
            this.move = move;
            return this;
        }

        public Builder versionGroupDetails(List<VersionGroupDetails> versionGroupDetails) {
            Utils.checkNotNull(versionGroupDetails, "versionGroupDetails");
            this.versionGroupDetails = versionGroupDetails;
            return this;
        }
        
        public Moves build() {
            return new Moves(
                move,
                versionGroupDetails);
        }
    }
}

