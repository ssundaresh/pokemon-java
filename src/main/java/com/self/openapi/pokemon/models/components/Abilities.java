/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package com.self.openapi.pokemon.models.components;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.self.openapi.pokemon.utils.Utils;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;


public class Abilities {

    @JsonProperty("ability")
    private Ability ability;

    @JsonProperty("is_hidden")
    private boolean isHidden;

    @JsonProperty("slot")
    private int slot;

    @JsonCreator
    public Abilities(
            @JsonProperty("ability") Ability ability,
            @JsonProperty("is_hidden") boolean isHidden,
            @JsonProperty("slot") int slot) {
        Utils.checkNotNull(ability, "ability");
        Utils.checkNotNull(isHidden, "isHidden");
        Utils.checkNotNull(slot, "slot");
        this.ability = ability;
        this.isHidden = isHidden;
        this.slot = slot;
    }

    @JsonIgnore
    public Ability ability() {
        return ability;
    }

    @JsonIgnore
    public boolean isHidden() {
        return isHidden;
    }

    @JsonIgnore
    public int slot() {
        return slot;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public Abilities withAbility(Ability ability) {
        Utils.checkNotNull(ability, "ability");
        this.ability = ability;
        return this;
    }

    public Abilities withIsHidden(boolean isHidden) {
        Utils.checkNotNull(isHidden, "isHidden");
        this.isHidden = isHidden;
        return this;
    }

    public Abilities withSlot(int slot) {
        Utils.checkNotNull(slot, "slot");
        this.slot = slot;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        Abilities other = (Abilities) o;
        return 
            Objects.deepEquals(this.ability, other.ability) &&
            Objects.deepEquals(this.isHidden, other.isHidden) &&
            Objects.deepEquals(this.slot, other.slot);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            ability,
            isHidden,
            slot);
    }
    
    @Override
    public String toString() {
        return Utils.toString(Abilities.class,
                "ability", ability,
                "isHidden", isHidden,
                "slot", slot);
    }
    
    public final static class Builder {
 
        private Ability ability;
 
        private Boolean isHidden;
 
        private Integer slot;  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder ability(Ability ability) {
            Utils.checkNotNull(ability, "ability");
            this.ability = ability;
            return this;
        }

        public Builder isHidden(boolean isHidden) {
            Utils.checkNotNull(isHidden, "isHidden");
            this.isHidden = isHidden;
            return this;
        }

        public Builder slot(int slot) {
            Utils.checkNotNull(slot, "slot");
            this.slot = slot;
            return this;
        }
        
        public Abilities build() {
            return new Abilities(
                ability,
                isHidden,
                slot);
        }
    }
}

