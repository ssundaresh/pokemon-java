/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package com.self.openapi.pokemon.models.components;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.self.openapi.pokemon.utils.Utils;
import java.lang.Boolean;
import java.lang.Long;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;


public class PokemonDetail {

    @JsonProperty("id")
    private long id;

    @JsonProperty("name")
    private String name;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("base_experience")
    private JsonNullable<Long> baseExperience;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("height")
    private JsonNullable<Long> height;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("is_default")
    private Optional<Boolean> isDefault;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("order")
    private JsonNullable<Long> order;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("weight")
    private JsonNullable<Long> weight;

    @JsonProperty("abilities")
    private List<Abilities> abilities;

    @JsonProperty("past_abilities")
    private List<PastAbilities> pastAbilities;

    @JsonProperty("forms")
    private List<PokemonFormSummary> forms;

    @JsonProperty("game_indices")
    private List<PokemonGameIndex> gameIndices;

    @JsonProperty("held_items")
    private List<Object> heldItems;

    @JsonProperty("location_area_encounters")
    private String locationAreaEncounters;

    @JsonProperty("moves")
    private List<Moves> moves;

    @JsonProperty("species")
    private PokemonSpeciesSummary species;
/* 
    @JsonProperty("sprites")
    private String sprites;
 */
    @JsonProperty("cries")
    private Cries cries;

    @JsonProperty("stats")
    private List<PokemonStat> stats;

    @JsonProperty("types")
    private List<Types> types;

    @JsonProperty("past_types")
    private List<PastTypes> pastTypes;

    @JsonCreator
    public PokemonDetail(
            @JsonProperty("id") long id,
            @JsonProperty("name") String name,
            @JsonProperty("base_experience") JsonNullable<Long> baseExperience,
            @JsonProperty("height") JsonNullable<Long> height,
            @JsonProperty("is_default") Optional<Boolean> isDefault,
            @JsonProperty("order") JsonNullable<Long> order,
            @JsonProperty("weight") JsonNullable<Long> weight,
            @JsonProperty("abilities") List<Abilities> abilities,
            @JsonProperty("past_abilities") List<PastAbilities> pastAbilities,
            @JsonProperty("forms") List<PokemonFormSummary> forms,
            @JsonProperty("game_indices") List<PokemonGameIndex> gameIndices,
            @JsonProperty("held_items") List<Object> heldItems,
            @JsonProperty("location_area_encounters") String locationAreaEncounters,
            @JsonProperty("moves") List<Moves> moves,
            @JsonProperty("species") PokemonSpeciesSummary species,
            // @JsonProperty("sprites") String sprites,
            @JsonProperty("cries") Cries cries,
            @JsonProperty("stats") List<PokemonStat> stats,
            @JsonProperty("types") List<Types> types,
            @JsonProperty("past_types") List<PastTypes> pastTypes) {
        Utils.checkNotNull(id, "id");
        Utils.checkNotNull(name, "name");
        Utils.checkNotNull(baseExperience, "baseExperience");
        Utils.checkNotNull(height, "height");
        Utils.checkNotNull(isDefault, "isDefault");
        Utils.checkNotNull(order, "order");
        Utils.checkNotNull(weight, "weight");
        Utils.checkNotNull(abilities, "abilities");
        Utils.checkNotNull(pastAbilities, "pastAbilities");
        Utils.checkNotNull(forms, "forms");
        Utils.checkNotNull(gameIndices, "gameIndices");
        Utils.checkNotNull(heldItems, "heldItems");
        Utils.checkNotNull(locationAreaEncounters, "locationAreaEncounters");
        Utils.checkNotNull(moves, "moves");
        Utils.checkNotNull(species, "species");
        // Utils.checkNotNull(sprites, "sprites");
        Utils.checkNotNull(cries, "cries");
        Utils.checkNotNull(stats, "stats");
        Utils.checkNotNull(types, "types");
        Utils.checkNotNull(pastTypes, "pastTypes");
        this.id = id;
        this.name = name;
        this.baseExperience = baseExperience;
        this.height = height;
        this.isDefault = isDefault;
        this.order = order;
        this.weight = weight;
        this.abilities = abilities;
        this.pastAbilities = pastAbilities;
        this.forms = forms;
        this.gameIndices = gameIndices;
        this.heldItems = heldItems;
        this.locationAreaEncounters = locationAreaEncounters;
        this.moves = moves;
        this.species = species;
        //this.sprites = sprites;
        this.cries = cries;
        this.stats = stats;
        this.types = types;
        this.pastTypes = pastTypes;
    }
    
    public PokemonDetail(
            long id,
            String name,
            List<Abilities> abilities,
            List<PastAbilities> pastAbilities,
            List<PokemonFormSummary> forms,
            List<PokemonGameIndex> gameIndices,
            List<Object> heldItems,
            String locationAreaEncounters,
            List<Moves> moves,
            PokemonSpeciesSummary species,
            // String sprites,
            Cries cries,
            List<PokemonStat> stats,
            List<Types> types,
            List<PastTypes> pastTypes) {
        this(id, name, JsonNullable.undefined(), JsonNullable.undefined(), Optional.empty(), JsonNullable.undefined(), JsonNullable.undefined(), abilities, pastAbilities, forms, gameIndices, heldItems, locationAreaEncounters, moves, species, cries, stats, types, pastTypes);
    }

    @JsonIgnore
    public long id() {
        return id;
    }

    @JsonIgnore
    public String name() {
        return name;
    }

    @JsonIgnore
    public JsonNullable<Long> baseExperience() {
        return baseExperience;
    }

    @JsonIgnore
    public JsonNullable<Long> height() {
        return height;
    }

    @JsonIgnore
    public Optional<Boolean> isDefault() {
        return isDefault;
    }

    @JsonIgnore
    public JsonNullable<Long> order() {
        return order;
    }

    @JsonIgnore
    public JsonNullable<Long> weight() {
        return weight;
    }

    @JsonIgnore
    public List<Abilities> abilities() {
        return abilities;
    }

    @JsonIgnore
    public List<PastAbilities> pastAbilities() {
        return pastAbilities;
    }

    @JsonIgnore
    public List<PokemonFormSummary> forms() {
        return forms;
    }

    @JsonIgnore
    public List<PokemonGameIndex> gameIndices() {
        return gameIndices;
    }

    @JsonIgnore
    public List<Object> heldItems() {
        return heldItems;
    }

    @JsonIgnore
    public String locationAreaEncounters() {
        return locationAreaEncounters;
    }

    @JsonIgnore
    public List<Moves> moves() {
        return moves;
    }

    @JsonIgnore
    public PokemonSpeciesSummary species() {
        return species;
    }

    // @JsonIgnore
    // public String sprites() {
    //     return sprites;
    // }

    @JsonIgnore
    public Cries cries() {
        return cries;
    }

    @JsonIgnore
    public List<PokemonStat> stats() {
        return stats;
    }

    @JsonIgnore
    public List<Types> types() {
        return types;
    }

    @JsonIgnore
    public List<PastTypes> pastTypes() {
        return pastTypes;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public PokemonDetail withId(long id) {
        Utils.checkNotNull(id, "id");
        this.id = id;
        return this;
    }

    public PokemonDetail withName(String name) {
        Utils.checkNotNull(name, "name");
        this.name = name;
        return this;
    }

    public PokemonDetail withBaseExperience(long baseExperience) {
        Utils.checkNotNull(baseExperience, "baseExperience");
        this.baseExperience = JsonNullable.of(baseExperience);
        return this;
    }

    public PokemonDetail withBaseExperience(JsonNullable<Long> baseExperience) {
        Utils.checkNotNull(baseExperience, "baseExperience");
        this.baseExperience = baseExperience;
        return this;
    }

    public PokemonDetail withHeight(long height) {
        Utils.checkNotNull(height, "height");
        this.height = JsonNullable.of(height);
        return this;
    }

    public PokemonDetail withHeight(JsonNullable<Long> height) {
        Utils.checkNotNull(height, "height");
        this.height = height;
        return this;
    }

    public PokemonDetail withIsDefault(boolean isDefault) {
        Utils.checkNotNull(isDefault, "isDefault");
        this.isDefault = Optional.ofNullable(isDefault);
        return this;
    }

    public PokemonDetail withIsDefault(Optional<Boolean> isDefault) {
        Utils.checkNotNull(isDefault, "isDefault");
        this.isDefault = isDefault;
        return this;
    }

    public PokemonDetail withOrder(long order) {
        Utils.checkNotNull(order, "order");
        this.order = JsonNullable.of(order);
        return this;
    }

    public PokemonDetail withOrder(JsonNullable<Long> order) {
        Utils.checkNotNull(order, "order");
        this.order = order;
        return this;
    }

    public PokemonDetail withWeight(long weight) {
        Utils.checkNotNull(weight, "weight");
        this.weight = JsonNullable.of(weight);
        return this;
    }

    public PokemonDetail withWeight(JsonNullable<Long> weight) {
        Utils.checkNotNull(weight, "weight");
        this.weight = weight;
        return this;
    }

    public PokemonDetail withAbilities(List<Abilities> abilities) {
        Utils.checkNotNull(abilities, "abilities");
        this.abilities = abilities;
        return this;
    }

    public PokemonDetail withPastAbilities(List<PastAbilities> pastAbilities) {
        Utils.checkNotNull(pastAbilities, "pastAbilities");
        this.pastAbilities = pastAbilities;
        return this;
    }

    public PokemonDetail withForms(List<PokemonFormSummary> forms) {
        Utils.checkNotNull(forms, "forms");
        this.forms = forms;
        return this;
    }

    public PokemonDetail withGameIndices(List<PokemonGameIndex> gameIndices) {
        Utils.checkNotNull(gameIndices, "gameIndices");
        this.gameIndices = gameIndices;
        return this;
    }

    public PokemonDetail withHeldItems(List<Object> heldItems) {
        Utils.checkNotNull(heldItems, "heldItems");
        this.heldItems = heldItems;
        return this;
    }

    public PokemonDetail withLocationAreaEncounters(String locationAreaEncounters) {
        Utils.checkNotNull(locationAreaEncounters, "locationAreaEncounters");
        this.locationAreaEncounters = locationAreaEncounters;
        return this;
    }

    public PokemonDetail withMoves(List<Moves> moves) {
        Utils.checkNotNull(moves, "moves");
        this.moves = moves;
        return this;
    }

    public PokemonDetail withSpecies(PokemonSpeciesSummary species) {
        Utils.checkNotNull(species, "species");
        this.species = species;
        return this;
    }

    // public PokemonDetail withSprites(String sprites) {
    //     Utils.checkNotNull(sprites, "sprites");
    //     this.sprites = sprites;
    //     return this;
    // }

    public PokemonDetail withCries(Cries cries) {
        Utils.checkNotNull(cries, "cries");
        this.cries = cries;
        return this;
    }

    public PokemonDetail withStats(List<PokemonStat> stats) {
        Utils.checkNotNull(stats, "stats");
        this.stats = stats;
        return this;
    }

    public PokemonDetail withTypes(List<Types> types) {
        Utils.checkNotNull(types, "types");
        this.types = types;
        return this;
    }

    public PokemonDetail withPastTypes(List<PastTypes> pastTypes) {
        Utils.checkNotNull(pastTypes, "pastTypes");
        this.pastTypes = pastTypes;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        PokemonDetail other = (PokemonDetail) o;
        return 
            Objects.deepEquals(this.id, other.id) &&
            Objects.deepEquals(this.name, other.name) &&
            Objects.deepEquals(this.baseExperience, other.baseExperience) &&
            Objects.deepEquals(this.height, other.height) &&
            Objects.deepEquals(this.isDefault, other.isDefault) &&
            Objects.deepEquals(this.order, other.order) &&
            Objects.deepEquals(this.weight, other.weight) &&
            Objects.deepEquals(this.abilities, other.abilities) &&
            Objects.deepEquals(this.pastAbilities, other.pastAbilities) &&
            Objects.deepEquals(this.forms, other.forms) &&
            Objects.deepEquals(this.gameIndices, other.gameIndices) &&
            Objects.deepEquals(this.heldItems, other.heldItems) &&
            Objects.deepEquals(this.locationAreaEncounters, other.locationAreaEncounters) &&
            Objects.deepEquals(this.moves, other.moves) &&
            Objects.deepEquals(this.species, other.species) &&
            // Objects.deepEquals(this.sprites, other.sprites) &&
            Objects.deepEquals(this.cries, other.cries) &&
            Objects.deepEquals(this.stats, other.stats) &&
            Objects.deepEquals(this.types, other.types) &&
            Objects.deepEquals(this.pastTypes, other.pastTypes);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            id,
            name,
            baseExperience,
            height,
            isDefault,
            order,
            weight,
            abilities,
            pastAbilities,
            forms,
            gameIndices,
            heldItems,
            locationAreaEncounters,
            moves,
            species,
            // sprites,
            cries,
            stats,
            types,
            pastTypes);
    }
    
    @Override
    public String toString() {
        return Utils.toString(PokemonDetail.class,
                "id", id,
                "name", name,
                "baseExperience", baseExperience,
                "height", height,
                "isDefault", isDefault,
                "order", order,
                "weight", weight,
                "abilities", abilities,
                "pastAbilities", pastAbilities,
                "forms", forms,
                "gameIndices", gameIndices,
                "heldItems", heldItems,
                "locationAreaEncounters", locationAreaEncounters,
                "moves", moves,
                "species", species,
                // "sprites", sprites,
                "cries", cries,
                "stats", stats,
                "types", types,
                "pastTypes", pastTypes);
    }
    
    public final static class Builder {
 
        private Long id;
 
        private String name;
 
        private JsonNullable<Long> baseExperience = JsonNullable.undefined();
 
        private JsonNullable<Long> height = JsonNullable.undefined();
 
        private Optional<Boolean> isDefault = Optional.empty();
 
        private JsonNullable<Long> order = JsonNullable.undefined();
 
        private JsonNullable<Long> weight = JsonNullable.undefined();
 
        private List<Abilities> abilities;
 
        private List<PastAbilities> pastAbilities;
 
        private List<PokemonFormSummary> forms;
 
        private List<PokemonGameIndex> gameIndices;
 
        private List<Object> heldItems;
 
        private String locationAreaEncounters;
 
        private List<Moves> moves;
 
        private PokemonSpeciesSummary species;
 
       // private String sprites;
 
        private Cries cries;
 
        private List<PokemonStat> stats;
 
        private List<Types> types;
 
        private List<PastTypes> pastTypes;  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder id(long id) {
            Utils.checkNotNull(id, "id");
            this.id = id;
            return this;
        }

        public Builder name(String name) {
            Utils.checkNotNull(name, "name");
            this.name = name;
            return this;
        }

        public Builder baseExperience(long baseExperience) {
            Utils.checkNotNull(baseExperience, "baseExperience");
            this.baseExperience = JsonNullable.of(baseExperience);
            return this;
        }

        public Builder baseExperience(JsonNullable<Long> baseExperience) {
            Utils.checkNotNull(baseExperience, "baseExperience");
            this.baseExperience = baseExperience;
            return this;
        }

        public Builder height(long height) {
            Utils.checkNotNull(height, "height");
            this.height = JsonNullable.of(height);
            return this;
        }

        public Builder height(JsonNullable<Long> height) {
            Utils.checkNotNull(height, "height");
            this.height = height;
            return this;
        }

        public Builder isDefault(boolean isDefault) {
            Utils.checkNotNull(isDefault, "isDefault");
            this.isDefault = Optional.ofNullable(isDefault);
            return this;
        }

        public Builder isDefault(Optional<Boolean> isDefault) {
            Utils.checkNotNull(isDefault, "isDefault");
            this.isDefault = isDefault;
            return this;
        }

        public Builder order(long order) {
            Utils.checkNotNull(order, "order");
            this.order = JsonNullable.of(order);
            return this;
        }

        public Builder order(JsonNullable<Long> order) {
            Utils.checkNotNull(order, "order");
            this.order = order;
            return this;
        }

        public Builder weight(long weight) {
            Utils.checkNotNull(weight, "weight");
            this.weight = JsonNullable.of(weight);
            return this;
        }

        public Builder weight(JsonNullable<Long> weight) {
            Utils.checkNotNull(weight, "weight");
            this.weight = weight;
            return this;
        }

        public Builder abilities(List<Abilities> abilities) {
            Utils.checkNotNull(abilities, "abilities");
            this.abilities = abilities;
            return this;
        }

        public Builder pastAbilities(List<PastAbilities> pastAbilities) {
            Utils.checkNotNull(pastAbilities, "pastAbilities");
            this.pastAbilities = pastAbilities;
            return this;
        }

        public Builder forms(List<PokemonFormSummary> forms) {
            Utils.checkNotNull(forms, "forms");
            this.forms = forms;
            return this;
        }

        public Builder gameIndices(List<PokemonGameIndex> gameIndices) {
            Utils.checkNotNull(gameIndices, "gameIndices");
            this.gameIndices = gameIndices;
            return this;
        }

        public Builder heldItems(List<Object> heldItems) {
            Utils.checkNotNull(heldItems, "heldItems");
            this.heldItems = heldItems;
            return this;
        }

        public Builder locationAreaEncounters(String locationAreaEncounters) {
            Utils.checkNotNull(locationAreaEncounters, "locationAreaEncounters");
            this.locationAreaEncounters = locationAreaEncounters;
            return this;
        }

        public Builder moves(List<Moves> moves) {
            Utils.checkNotNull(moves, "moves");
            this.moves = moves;
            return this;
        }

        public Builder species(PokemonSpeciesSummary species) {
            Utils.checkNotNull(species, "species");
            this.species = species;
            return this;
        }

        // public Builder sprites(String sprites) {
        //     Utils.checkNotNull(sprites, "sprites");
        //     this.sprites = sprites;
        //     return this;
        // }

        public Builder cries(Cries cries) {
            Utils.checkNotNull(cries, "cries");
            this.cries = cries;
            return this;
        }

        public Builder stats(List<PokemonStat> stats) {
            Utils.checkNotNull(stats, "stats");
            this.stats = stats;
            return this;
        }

        public Builder types(List<Types> types) {
            Utils.checkNotNull(types, "types");
            this.types = types;
            return this;
        }

        public Builder pastTypes(List<PastTypes> pastTypes) {
            Utils.checkNotNull(pastTypes, "pastTypes");
            this.pastTypes = pastTypes;
            return this;
        }
        
        public PokemonDetail build() {
            return new PokemonDetail(
                id,
                name,
                baseExperience,
                height,
                isDefault,
                order,
                weight,
                abilities,
                pastAbilities,
                forms,
                gameIndices,
                heldItems,
                locationAreaEncounters,
                moves,
                species,
                // sprites,
                cries,
                stats,
                types,
                pastTypes);
        }
    }
}

