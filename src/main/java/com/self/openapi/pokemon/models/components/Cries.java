/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package com.self.openapi.pokemon.models.components;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.self.openapi.pokemon.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;


public class Cries {

    @JsonProperty("latest")
    private String latest;

    @JsonProperty("legacy")
    private String legacy;

    @JsonCreator
    public Cries(
            @JsonProperty("latest") String latest,
            @JsonProperty("legacy") String legacy) {
        Utils.checkNotNull(latest, "latest");
        Utils.checkNotNull(legacy, "legacy");
        this.latest = latest;
        this.legacy = legacy;
    }

    @JsonIgnore
    public String latest() {
        return latest;
    }

    @JsonIgnore
    public String legacy() {
        return legacy;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public Cries withLatest(String latest) {
        Utils.checkNotNull(latest, "latest");
        this.latest = latest;
        return this;
    }

    public Cries withLegacy(String legacy) {
        Utils.checkNotNull(legacy, "legacy");
        this.legacy = legacy;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        Cries other = (Cries) o;
        return 
            Objects.deepEquals(this.latest, other.latest) &&
            Objects.deepEquals(this.legacy, other.legacy);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            latest,
            legacy);
    }
    
    @Override
    public String toString() {
        return Utils.toString(Cries.class,
                "latest", latest,
                "legacy", legacy);
    }
    
    public final static class Builder {
 
        private String latest;
 
        private String legacy;  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder latest(String latest) {
            Utils.checkNotNull(latest, "latest");
            this.latest = latest;
            return this;
        }

        public Builder legacy(String legacy) {
            Utils.checkNotNull(legacy, "legacy");
            this.legacy = legacy;
            return this;
        }
        
        public Cries build() {
            return new Cries(
                latest,
                legacy);
        }
    }
}

