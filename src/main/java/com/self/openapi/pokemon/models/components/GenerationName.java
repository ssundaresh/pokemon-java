/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package com.self.openapi.pokemon.models.components;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.self.openapi.pokemon.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;


public class GenerationName {

    @JsonProperty("name")
    private String name;

    @JsonProperty("language")
    private LanguageSummary language;

    @JsonCreator
    public GenerationName(
            @JsonProperty("name") String name,
            @JsonProperty("language") LanguageSummary language) {
        Utils.checkNotNull(name, "name");
        Utils.checkNotNull(language, "language");
        this.name = name;
        this.language = language;
    }

    @JsonIgnore
    public String name() {
        return name;
    }

    @JsonIgnore
    public LanguageSummary language() {
        return language;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public GenerationName withName(String name) {
        Utils.checkNotNull(name, "name");
        this.name = name;
        return this;
    }

    public GenerationName withLanguage(LanguageSummary language) {
        Utils.checkNotNull(language, "language");
        this.language = language;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        GenerationName other = (GenerationName) o;
        return 
            Objects.deepEquals(this.name, other.name) &&
            Objects.deepEquals(this.language, other.language);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            name,
            language);
    }
    
    @Override
    public String toString() {
        return Utils.toString(GenerationName.class,
                "name", name,
                "language", language);
    }
    
    public final static class Builder {
 
        private String name;
 
        private LanguageSummary language;  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder name(String name) {
            Utils.checkNotNull(name, "name");
            this.name = name;
            return this;
        }

        public Builder language(LanguageSummary language) {
            Utils.checkNotNull(language, "language");
            this.language = language;
            return this;
        }
        
        public GenerationName build() {
            return new GenerationName(
                name,
                language);
        }
    }
}

